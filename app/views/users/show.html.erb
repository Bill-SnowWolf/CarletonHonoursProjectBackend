<style>
  button {
    margin: 0 20px 0 0;
    width: 85.9px;
  }

  button#hangupButton {
    margin: 0;
  }

  p.borderBelow {
    margin: 0 0 1.5em 0;
    padding: 0 0 1.5em 0;
  }

  video {
    height: 225px;
    margin: 0 0 20px 0;
    vertical-align: top;
    width: calc(50% - 13px);
  }

  video#localVideo {
    margin: 0 20px 20px 0;
  }

  @media screen and (max-width: 400px) {

    button {
      width: 83px;
    }

    button {
      margin: 0 11px 10px 0;
    }

    video {
      height: 90px;
      margin: 0 0 10px 0;
      width: calc(50% - 7px);
    }

    video#localVideo {
      margin: 0 10px 20px 0;
    }
  }
</style>


<div id="container">
  <div data-api-key="<%= Pusher.key %>" data-auth-endpoint="<%= pusher_auth_video_path %>" id="pusher_data"></div>
  <!-- <h1>You entered room <%= @room[:room_number] %> </h1> -->

  <h1 id="statusLabel"></h1>

  <audio id="remoteAudio" autoplay></audio>

  <div>
    <!-- <button id="startButton">Start</button> -->
    <!-- <button id="callButton">Call</button> -->
    <button id="hangupButton">Hang Up</button>
  </div>

</div>

<script type="text/javascript">
$(function() {
  // Initialize WebRTC functions based on Browser
  var RTCPeerConnection;


  if (navigator.mozGetUserMedia) {
    // Firefox
    RTCPeerConnection = mozRTCPeerConnection;
    navigator.getUserMedia = navigator.mozGetUserMedia;
    
    // The RTCSessionDescription object.
    RTCSessionDescription = mozRTCSessionDescription;

    // The RTCIceCandidate object.
    RTCIceCandidate = mozRTCIceCandidate;
  } else {
    RTCPeerConnection = webkitRTCPeerConnection;
    navigator.getUserMedia = webkitGetUserMedia;
  }

  var localStream;
  var peerConnection;

  var remoteAudio = document.getElementById('remoteAudio');
  var hangupButton = document.getElementById('hangupButton');
  var statusLabel = document.getElementById('statusLabel');
  hangupButton.disabled = true;
  hangupButton.onclick = hangup;


  function createPeerConnection(stream) {
    var pcConfig = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
    peerConnection = new RTCPeerConnection(pcConfig);   // 1. 
    peerConnection.addStream(stream);  // 2.
    peerConnection.onicecandidate = gotLocalIceCandidate;
    peerConnection.onaddstream = gotRemoteStream;
    peerConnection.oniceconnectionstatechange = iceConnectionStateChanged;  
  }

  function gotStream(stream) {
    localStream = stream;   
    createPeerConnection(stream);      
  }

  var pusher;
  var channel; 
  var initialator = false;
  var user_id = "<%= @user.id %>";

  pusher = new Pusher($('#pusher_data').data().apiKey, {
    authEndpoint: $('#pusher_data').data().authEndpoint,
    auth: {
      params: {
        room_number: user_id
      }
    }
  });

  channel = pusher.subscribe('private-video-' + user_id);

  channel.bind("pusher:subscription_succeeded", function() {
    channel.bind("client-offer", offerReceived); 
    channel.bind("client-answer", answerReceived); 
    channel.bind("client-icecandidate", iceCandidateReceived);
  });


  function start() {
    lobby.available();

    updateStatus("Please wait for incoming call...");

    hangupButton.disabled = true;    

    var mediaConstraints = {
      video: false, 
      audio: true
    };

    navigator.getUserMedia(mediaConstraints, gotStream, function(error) {
      trace('navigator.getUserMedia error: ', error);
    });
    
    $.ajax({
      url: "/api/service_calls/available_user",
      type: 'POST',
      data: {'user_id': user_id}
    });
  }

  function call() { // Caller
    console.log('Starting call');    
    peerConnection.createOffer(gotLocalDescription);  // 3.
  }

  function hangup() {
    peerConnection.close();
    start();
  }

  // Pushter Channel Callbacks
  function offerReceived(offer) {   // Callee
    lobby.busy();

    console.log("Offer Received: " + offer.sdp);
    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    peerConnection.createAnswer(gotRemoteDescription);
  }

  function answerReceived(answer) { // Caller
    console.log("Answer Received: " + answer.sdp);
    peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
  }

  function iceCandidateReceived(data) {
    console.log("Ice Candidate Receivced: " + data.candidate);
     var candidate = new RTCIceCandidate({
      candidate: data.candidate,
      sdpMLineIndex: data.sdpMLineIndex
    });
    peerConnection.addIceCandidate(new RTCIceCandidate(candidate));    
  }

  function iceConnectionStateChanged() {
    var state = peerConnection.iceConnectionState;
    console.log("State Changed: " + state);
    if (state == "disconnected") {
      updateStatus("Client disconnected.");
      hangup();
    } else if (state == "connected") {
      updateStatus("Communication started.");
      hangupButton.disabled = false;
    }
  }

  // RTCPeerConnection Callbacks
  function gotLocalDescription(offer) { // Caller
    // 4.
    console.log("Got Local Description:" + offer.sdp);
    peerConnection.setLocalDescription(offer);

    channel.trigger("client-offer", offer); // 6.
    // remotePC.offerReceived(offer);      
  }

  function gotRemoteDescription(answer){  // Callee
    console.log("Got Remote Description.");
    peerConnection.setLocalDescription(answer);
    channel.trigger("client-answer", answer); // 7.
  }

  function gotLocalIceCandidate(event){ // Caller        
    console.log("Got Local IceCandidate " + event);
    if (event.candidate) {
      channel.trigger("client-icecandidate", event.candidate);
    }      
  }

  function gotRemoteStream(event) {
    remoteAudio.src = URL.createObjectURL(event.stream);
    console.log('Received remote stream ' + event.stream);
  }

  // Start Stream Automatically
  var key = "<%= Pusher.key %>"
  var currentUser = {
    id: "<%= @user.id %>",
    name: "<%= @user.name %>"
    // time: new Date()
  }
  console.log(currentUser);
  console.log(lobby);

  lobby.init(key, currentUser);
  start();

  function updateStatus(status) {
    statusLabel.innerHTML = status;
  }

});

</script>